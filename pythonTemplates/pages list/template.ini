# USAGE:
# [stuff]
#	<reserved for general system settings>
#
# [variable]
# 	name="" ......... the name of the replacement (in ui)
# 	description="" .. Description of the replacement (ui tooltip)
# 	uitype="" ....... type of ui element (none,field,textarea,... more to come) (default=field)
# 	value="" ........ default value
#	preReplace="" ... code to run after the vars window, but before the replacement
#
# [replace]
# 	find="" ........... what to replace (usually something unique like [[name]] is a good idea)
#   replace="" ........ what to replace it with
# 	files=[""] ........ which files to perform replacement in (default=*, meaning all files)
#
# [ignore]
# 	files=[""] ........ which files to not copy over (useful if you have code in here) (default=['template.ini'])
#
# Remember, everything on the right hand side of = is python code, so you can do useful
# and/or unfortunate things with this.
#
# If there are no variables that are not none, will not show the ui
#
# There is a special variable called openAfter that will cause an external command to be run after the thing is created.
# you can set its value to "os" or "default" to use the system default opener for this type.
[variable]
	name="filename"
	description="The name of the pages file"
	value="x.pages"
	preReplace=filename.value\
		if preReplace.endswith('.pages'):\
			preReplace=filename.value[0:-6]

[variable]
	name="only_existing_items"
	description="Only include existing items (as opposed to allowing future items to join in the list)"
	value="f"
	uitype="checkbox"
	
[variable]
	name="html_files"
	description="Include html files in the pages file"
	value="f"
	uitype="checkbox"

[variable]
	name="web_links"
	description="Include local html files in the pages file"
	value="t"
	uitype="checkbox"
	
[variable]
	name="other_pages"
	description="Include references to other pages files in this one"
	value="t"
	uitype="checkbox"

[variable]
	name="everything"
	description="Include everything with *.*"
	value="f"
	uitype="checkbox"
	
[variable]
	name="inside"
	description="gather everything that goes inside for the replacement"
	value=""
	uitype="hidden"
	preReplace=[]\
		import os\
		if only_existing_items.toBool():\
			for f in os.listdir('./'):\
				if os.path.isfile(f):\
					ext=f.rsplit('.',1)[-1].lower()\
					if ext=='pages' and (other_pages.toBool() or everything.toBool()):\
						preReplace.append(f)\
					elif ext=='url' and (web_links.toBool() or everything.toBool()):\
						preReplace.append(f)\
					elif ext in ['htm','html'] and (html_files.toBool() or everything.toBool()):\
						preReplace.append(f)\
		else:\
			if everything.toBool():\
				preReplace.append('*.*')\
			else:\
				if other_pages.toBool():\
					preReplace.append('*.pages')\
				if web_links.toBool():\
					preReplace.append('*.url')\
				if html_files.toBool():\
					preReplace.append('*.htm*')\
		preReplace='\n'.join(preReplace)
	
[replace]
	find="[[inside]]"
	replace=inside
	
[replace]
 	find="[[filename]]"
	replace=filename
	